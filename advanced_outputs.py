# -*- coding: utf-8 -*-
"""advanced_outputs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KphdIBf_CmbCZvyTBIT1kt1ktov_gjPo

# ✒️ Executing JavaScript & HTML from Python
"""

from IPython.display import display,HTML,Javascript,JSON
from google.colab import output

display(Javascript("""
  window.someValue=new Promise(resolve=>{
      setTimeout(()=>{resolve('😋 😌 😍 😎 😏 HELLO!!!');},100);});
"""))
output.eval_js('someValue')

js_str="""
var out1=document.querySelector('#output-area'),
    text1=document.createElement('text'),
    str1='😋 😌 😍 😎 😏 HELLO!!!';
text1.appendChild(document.createTextNode(str1));
out1.appendChild(text1);
text1.id='text1'; text1.style.padding='20px';
out1.style.border='double'; out1.style.width='50%';
var tc=setInterval(function() {
  var doc=document.getElementById('text1');
  var sec=Math.floor(new Date().getTime()%60000/1000);
  var col='rgb('+(10+Math.abs(245-8*sec))+',0,'+
          (255-Math.abs(245-8*sec))+')';
  doc.style.color=col;}, 1000);  
"""
display(Javascript(js_str))

html_str="""
<script>
function addTextNode(text){
  var newtext=document.createTextNode(text),
      p1=document.getElementById('p1');
  p1.appendChild(newtext);}
var tc=setInterval(function() {
  var doc=document.getElementById('p1'),
      but1=document.getElementById('button1'),
      but2=document.getElementById('button2');
  var sec=Math.floor(new Date().getTime()%60000/1000);
  var col='rgb('+(10+Math.abs(245-8*sec))+',0,'+
          (255-Math.abs(245-8*sec))+')';
  but1.style.background=col; but2.style.background=col;
  doc.style.color=col;}, 1000);  
</script>
<button id='button1' onclick='addTextNode(&#34;&nbsp;YES! &#34;);'>YES!</button>
<button id='button2' onclick='addTextNode(&#34;&nbsp;NO! &#34;);'>NO!</button>
<hr align='left' style='width:50%;'/><hr align='left' style='width:50%;'/>
<p id='p1' style='font-size:30px;'>Text Nodes:<br/></p>
<hr align='left' style='width:50%;'/><hr align='left' style='width:50%;'/>
"""
display(HTML(html_str))

"""#✒️ Tagged Outputs"""

import sys,time

print('The process is starting')
with output.use_tags('tagged_outputs'):
    for el in ['working \n','=> => => \n','still working \n']:
        sys.stdout.write('working \n')
        sys.stdout.flush(); time.sleep(5)
output.clear(output_tags='tagged_outputs')
print('Outputs have cleared')

"""# ✒️ Widgets"""

import pandas as pd,ipywidgets as iw
import altair as alt,pylab as pl
from vega_datasets import data

starts=[17,67,52,35,88]; n=len(starts)
sliders=[iw.IntSlider(starts[i],min=0,max=100) 
         for i in range(n)]
colors=[(i/5.,i/10.,.75) for i in range(n)]
@widgets.interact(
    v0=sliders[0],v1=sliders[1],v2=sliders[2],
    v3=sliders[3],v4=sliders[4])
def render(v0,v1,v2,v3,v4):
    values=[v0,v1,v2,v3,v4]; n=len(values)
    df=pd.DataFrame([range(n),values],index=['x','y']).T
    df.y.plot.bar(figsize=(10,4),color=colors); pl.show()

def pd_style():
    return [dict(selector='th',
                 props=[('font-size','12pt'),('color','white'),
                        ('min-width','70px'),('height','30px')]),
            dict(selector='td',
                 props=[('font-size','10pt'),('color','whitesmoke'),
                        ('padding','0em 0em'),
                        ('min-width','170px'),('height','30px')]),
            dict(selector='tr:hover th:hover',
                 props=[('font-size','16pt'),
                        ('text-shadow','3px 3px 3px #aaa')]),
            dict(selector='tr:hover td:hover',
                 props=[('font-size','12pt'),
                        ('text-shadow','3px 3px 3px #aaa')])]

source=data.stocks()
stock_picker=widgets.SelectMultiple(
    options=source.symbol.unique(),
    value=list(source.symbol.unique()),
    description='SYMBOLS')
@widgets.interact(symbols=stock_picker)
def render(symbols):
  selected=source.symbol.isin(list(symbols))
  display(source[selected].head(3).T\
          .style.set_table_styles(pd_style()))
  chart=alt.Chart(source[selected]).mark_line().encode(
      x='date',y='price',color='symbol',strokeDash='symbol')
  return chart