# -*- coding: utf-8 -*-
"""sql_cookbook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eBNz-GA6w0AhdsKHqtxkrIm1bIYk_X9d

## ðŸ“‘  Create SQL Databases
"""

import sqlite3,os
import pandas as pd,numpy as np,sympy as sp
sp.init_printing(use_unicode=True)
if os.path.exists("example.db"):
    os.remove("example.db")
else:
    print("The file does not exist")
os.listdir()

def connect_to_db(dbf):
    sqlconn=None
    try:
        sqlconn=sqlite3.connect(dbf)
        return sqlconn
    except Error as err:
        print(err)
        if sqlconn is not None:
            sqlconn.close()
connection=connect_to_db("example.db")
if connection is not None:
    cursor=connection.cursor()
os.listdir()

def get_query(q):
    sp.pprint(r'SQL Queries')
    tr=[]; cursor.execute(q)
    result=cursor.fetchall()
    for r in result: 
        tr+=[r]
        sp.pprint([r])
thp=[('font-size','15px'),('text-align','center'),
     ('font-weight','bold'),('padding','5px 5px'),
     ('color','white'),('background-color','slategray')]
tdp=[('font-size','14px'),('padding','5px 5px'),
     ('text-align','center'),('color','darkblue'),
     ('background-color','silver')]
style_dict=[dict(selector="th",props=thp),
            dict(selector="td",props=tdp)]

df1=pd.DataFrame({'key':['A','B','C','D','F','F'],
                  'value':np.random.randn(6)})
df2=pd.DataFrame({'key':['B','D','D','E','F'],
                  'value':np.random.randn(5)})
for df in [df1,df2]:
    display(df.style\
              .set_table_styles(style_dict))

"""## ðŸ“‘  Create SQL Tables"""

# using the sqlite3 module
cursor.execute('''
CREATE TABLE IF NOT EXISTS projects (
id integer PRIMARY KEY,
name text NOT NULL,
begin_date text,
end_date text);
''')
cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
id integer PRIMARY KEY,
name text NOT NULL,
priority integer,
status_id integer NOT NULL,
project_id integer NOT NULL,
begin_date text NOT NULL,
end_date text NOT NULL,
FOREIGN KEY (project_id) REFERENCES projects (id)
);
''')

def create_project(cursor,project):
    q='''INSERT INTO projects(name,begin_date,end_date)
         VALUES(?,?,?)'''
    cursor.execute(q,project)
    return cursor.lastrowid
def create_task(cursor,task):
    q='''INSERT INTO tasks(
         name,priority,status_id,
         project_id,begin_date,end_date
         ) VALUES(?,?,?,?,?,?)'''
    cursor.execute(q,task)
    return cursor.lastrowid
project1=('SQL CookBook with SageMathCell',
          '2020-02-04','2020-02-18')
project2=('SQL Tests',
          '2020-01-31','2020-02-14')
project_id1=create_project(cursor,project1)
project_id2=create_project(cursor,project2)
t=[('Page 1',int(1),int(1),
    project_id1,'2020-02-04','2020-02-12'),
   ('Page 2',int(1),int(1),
    project_id1,'2020-02-10','2020-02-18'),
   ('Test 1',int(1),int(1),
    project_id2,'2020-01-31','2020-02-01'),
   ('Test 2',int(1),int(1),
    project_id2,'2020-02-02','2020-02-03'),
   ('Test 3',int(1),int(1),
    project_id2,'2020-02-04','2020-02-05'),
   ('Test 4',int(1),int(1),
    project_id2,'2020-02-06','2020-02-07'),
   ('Test 5',int(1),int(1),
    project_id2,'2020-02-08','2020-02-09'),
   ('Test 6',int(1),int(1),
    project_id2,'2020-02-09','2020-02-10'),
   ('Test 7',int(1),int(1),
    project_id2,'2020-02-10','2020-02-11'),
   ('Dublicate',int(1),int(1),
    project_id2,'2020-02-11','2020-02-14')]
for task in t:        
    create_task(cursor,task)

# from pandas dataframes
df1.to_sql('df1',con=connection,
            index=False,if_exists='replace')
df2.to_sql('df2',con=connection,
            index=False,if_exists='replace')

# from pandas dataframes and csv files
url='https://raw.github.com/pydata/pandas/'+\
    'master/pandas/tests/data/tips.csv'
tips=pd.read_csv(url)
tips.to_sql('tips',con=connection,
            if_exists='replace')
tips.head(int(10)).style\
    .set_table_styles(style_dict)

"""## ðŸ“‘  SQL Basic Queries"""

q=pd.read_sql_query('''
SELECT *
FROM df1,df2;
''',con=connection)
q.set_axis(['key1','value1',
            'key2','value2'],
           axis=1,inplace=True)
q.style.set_table_styles(style_dict)

q=pd.read_sql_query('''
SELECT *
FROM df1,df2
WHERE df1.key=df2.key AND df1.value>0
ORDER BY key DESC;
''',con=connection)
q.set_axis(['key1','value1',
            'key2','value2'],
           axis=1,inplace=True)
q.style.set_table_styles(style_dict)

get_query('''
SELECT *
FROM projects,tasks
WHERE projects.id=tasks.project_id;
''')

q=pd.read_sql_query('''
SELECT *
FROM projects,tasks
WHERE projects.id=tasks.project_id;
''',con=connection)
cn=['pid','pname','pbegin_date','pend_date',
    'tid','tname','tpriority','tstatus_id',
    'tproject_id','tbegin_date','tend_date']
q.set_axis(cn,axis=1,inplace=True)
q.style.set_table_styles(style_dict)

"""## ðŸ“‘  SQL & Pandas Similarity"""

get_query('''
SELECT total_bill,tip,smoker,time
FROM tips
LIMIT 7;
''')
sp.pprint('Pandas Queries')
tips[['total_bill','tip',
      'smoker','time']].head(int(7))\
    .style.set_table_styles(style_dict)

get_query('''
SELECT *
FROM tips
WHERE time='Dinner'
LIMIT 3;
''')
sp.pprint('Pandas Queries')
tips[tips['time']=='Dinner'].head(int(3))\
    .style.set_table_styles(style_dict)

get_query('''
SELECT day,sex,AVG(tip),COUNT(*)
FROM tips
GROUP BY day,sex;
''')
sp.pprint('Pandas Queries')
tips.groupby(['day','sex'])\
    .agg({'tip':np.mean,'day':np.size})\
    .style.set_table_styles(style_dict)

"""## ðŸ“‘  SQL JOIN & UNION"""

get_query('''
SELECT *
FROM df1
INNER JOIN df2
ON df1.key=df2.key;
''')
sp.pprint('Pandas Queries')
pd.merge(df1,df2,on='key')\
  .style.set_table_styles(style_dict)

get_query('''
SELECT *
FROM df1
LEFT OUTER JOIN df2
ON df1.key=df2.key;
''')
sp.pprint('Pandas Queries')
pd.merge(df1,df2,on='key',how='left')\
  .style.set_table_styles(style_dict)

get_query('''
SELECT *
FROM df2
LEFT OUTER JOIN df1
ON df1.key=df2.key;
''')
sp.pprint('Pandas Queries')
q=pd.merge(df1,df2,on='key',how='right')
q=q[['key','value_y','value_x']]
q.style.set_table_styles(style_dict)

get_query('''
SELECT key,value
FROM df1
UNION ALL
SELECT key,value
FROM df2;
''')
sp.pprint('Pandas Queries')
pd.concat([df1,df2])\
  .set_index(pd.Index(range(11)))\
  .style.set_table_styles(style_dict)

"""## ðŸ“‘ Close the Connection and Delete This Database"""

pd.read_sql_query('''
SELECT * from sqlite_master;
''',con=connection)\
.style.set_table_styles(style_dict)

if connection is not None:
    connection.close()

if os.path.exists("example.db"):
    os.remove("example.db")
else:
    print("The file does not exist")
os.listdir()