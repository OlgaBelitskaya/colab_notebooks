# -*- coding: utf-8 -*-
"""plotly_practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Ix65Uf9mmHwXwNESDT6dnztZhLfmGjA
"""

import plotly.graph_objects as go
import urllib,numpy as np,pandas as pd
import plotly.express as px

t=np.linspace(0,2*np.pi,3600) 
fig=go.Figure(); steps=[]
for step in np.arange(1,41,4):
    f=np.cos(14*t)+np.cos(6*t)
    fig.add_trace(go.Scatter(
            visible=False,name="k="+str(step),
            line=dict(color='rgb(.7,0,%f)'%(step/41),width=2),
            x=f*np.cos(step*t),y=f*np.sin(step*t)))
fig.data[0].visible=True
st="x=(cos(14t)+sin(6t))cos(kt) \n"+\
   "y=(cos(14t)+sin(6t))sin(kt)"
for i in range(len(fig.data)):
    step=dict(method="update",
              args=[{"visible":[False]*len(fig.data)}])
    step["args"][0]["visible"][i]=True
    steps.append(step)
sliders=[dict(active=10,pad={"t":20},steps=steps)]
fig.update_layout(width=500,height=550,sliders=sliders,
                  template='plotly_dark',
                  title_text=st,title_font=dict(size=15))
fig.show()

values=['Fresh','Milk','Grocery','Frozen',
        'Detergents_Paper','Delicatessen']
customers=['Customer 1','Customer 2','Customer 3']
data=[[26373,36423,22019,5154,4337,16523],
      [16165,4230,7595,201,4003,57],
      [14276,803,3045,485,100,518]]
df=pd.DataFrame(data).T 
df.columns=customers; df.index=values; df

fig=px.bar(df,y='Customer 1',x=df.index,
           text='Customer 1',color=df.index)
fig.update_traces(texttemplate='%{text:d}',
                  textposition='outside')
fig.update_layout(width=500,height=500,
                  showlegend=False,
                  xaxis=dict(title=''))
fig.show()

pdata=[go.Bar(name=df.columns[i],
              x=df.index,y=df.iloc[:,i])
       for i in range(3)]
fig=go.Figure(pdata)
fig.update_layout(width=500,height=500,barmode='stack',
                  template='plotly_white')
fig.show()

a,b=np.random.randint(1,3),np.random.randint(3,5)
c,d=np.random.randint(2,4),np.random.randint(10,12)
e,f=np.random.randint(13,18),np.random.randint(1,3)
t=np.linspace(0,2*np.pi,60); r=[-1,0,1]
fx=-d*np.cos(t)-f*np.cos(b*t)+e*np.sin(a*t)
fy=-e*np.cos(a*t)+d*np.sin(t)-f*np.sin(b*t)
fz=d*np.cos(c*t)
fig=go.Figure(data=[go.Scatter3d(z=r[k]*fz,\
x=r[i]*fx,y=r[j]*fy,marker=dict(size=1.5)) \
for i in range(3) for j in range(3) for k in range(3)])
scene=dict(xaxis=dict(title='',showticklabels=False),
           yaxis=dict(title='',showticklabels=False),
           zaxis=dict(title='',showticklabels=False))
fig.update_layout(title='3D Functions',autosize=False,
                  width=500,height=500,showlegend=False,
                  margin=dict(l=3,r=3,b=3,t=30),
                  scene=scene,template='plotly_dark')
fig.show()

u=np.linspace(0,2*np.pi,200)
v=np.linspace(0,2*np.pi,200)
fx=(2+np.cos(v/2)*np.sin(u)-\
    np.sin(v/2)*np.sin(4*u))*np.cos(v)
fy=(2+np.cos(v/2)*np.sin(u)-\
    np.sin(v/2)*np.sin(4*u))*np.sin(v)
fz=abs(np.sin(v/2)*np.sin(u)+np.cos(v/2)*np.sin(4*u))
fig=go.Figure(data=[go.Scatter3d(x=i*fx,\
y=j*fy,z=k*fz,marker=dict(size=1))\
for i in range(5) for j in range(5) for k in range(5)])
scene=dict(xaxis=dict(title='',showticklabels=False),
           yaxis=dict(title='',showticklabels=False),
           zaxis=dict(title='',showticklabels=False))
fig.update_layout(title='3D Functions',autosize=False,
                  width=500,height=500,showlegend=False,
                  margin=dict(l=3,r=3,b=3,t=30),
                  scene=scene,template='plotly_dark')
fig.show()

fpath='https://olgabelitskaya.github.io/'
f='beethoven.csv'
input_file=urllib.request.urlopen(fpath+f)
output_file=open(f,'wb')
output_file.write(input_file.read())
output_file.close(); input_file.close()
b=np.loadtxt(f,delimiter=',',skiprows=1)
fig=go.Figure(data=[go.Scatter3d(x=b[:,0],y=b[:,1],z=b[:,2],\
mode='markers',marker=dict(size=.9,color='green')) \
for i in range(3) for j in range(3) for k in range(3)])
scene=dict(xaxis=dict(title='',visible=False),
           yaxis=dict(title='',visible=False),
           zaxis=dict(title='',visible=False))
fig.update_layout(title='3D Functions',autosize=False,
                  width=500,height=500,showlegend=False,
                  margin=dict(l=3,r=3,b=3,t=30),
                  scene=scene,template='plotly_dark')
fig.show()